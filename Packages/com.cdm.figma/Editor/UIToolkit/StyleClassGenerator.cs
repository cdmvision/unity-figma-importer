using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using UnityEngine.UIElements;

namespace Cdm.Figma.UIToolkit
{
    public static class StyleClassGenerator
    {
        [MenuItem("Window/Figma Importer/UI Toolkit/Generate Style Class")]
        public static void GenerateCode()
        {
            var sourceCode = new StringBuilder();
            sourceCode.AppendLine("using UnityEngine;");
            sourceCode.AppendLine("using UnityEngine.UIElements;");
            sourceCode.AppendLine();
            sourceCode.AppendLine("namespace Cdm.Figma.UIToolkit");
            sourceCode.AppendLine("{");
            sourceCode.AppendLine($"\t// This code was generated by a machine at {DateTime.UtcNow:u}.");
            sourceCode.AppendLine("\tpublic partial class Style");
            sourceCode.AppendLine("\t{");
            
            var properties = typeof(IStyle).GetProperties();

            foreach (var property in properties)
            {
                if (property.GetGetMethod() != null &&
                    property.GetSetMethod() != null)
                {
                    sourceCode.AppendLine(
                        $"\t\tpublic {GetRealTypeName(property.PropertyType)}? {property.Name} {{ get; set; }} = null;");
                }
            }

            sourceCode.AppendLine("\t}");
            sourceCode.AppendLine("}");
            
            var path = 
                Path.Combine(Application.dataPath, "../Packages/com.cdm.figma/Runtime/UIToolkit/Style.Properties.cs");
            File.WriteAllText(path, sourceCode.ToString());
            
            AssetDatabase.Refresh();
        }
        
        private static string GetRealTypeName(this Type t)
        {
            if (!t.IsGenericType)
                return t.Name;

            var sb = new StringBuilder();
            sb.Append(t.Name.Substring(0, t.Name.IndexOf('`')));
            sb.Append('<');
            
            var appendComma = false;
            foreach (var arg in t.GetGenericArguments())
            {
                if (appendComma) sb.Append(',');
                sb.Append(GetRealTypeName(arg));
                appendComma = true;
            }
            sb.Append('>');
            return sb.ToString();
        }
    }
}